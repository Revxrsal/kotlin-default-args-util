package revxrsal.args.util;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import revxrsal.args.reflect.MethodCaller;
import revxrsal.args.reflect.MethodCaller.BoundMethodCaller;
import revxrsal.args.reflect.MethodWrapper;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static revxrsal.args.util.KotlinSingletons.findSingleton;
import static revxrsal.args.util.KotlinSingletons.getCallerForNonDefault;

/**
 * A utility for finding the default synthetic function generated by
 * the Kotlin compiler. This will attempt to find it the following order:
 * <ol>
 *     <li>
 *         Find a <code>(name)$default</code> function with the parameters + 2 additional
 *         synthetic ones
 *     </li>
 *     <li>
 *         Find a <code>(name)$default</code> function with the declaring class as the parameter,
 *         then the function parameters, then 2 additional synthetic parameters
 *     </li>
 *     <li>
 *         Find an inner Companion object, and apply step 2.
 *     </li>
 * </ol>
 * <p>
 * Special cases:
 * <ol>
 *     <li>
 *         A Kotlin <code>object</code>: The 1st parameter is the object type, and
 *         the synthetic function exists in the same class
 *     </li>
 *     <li>
 *         A Kotlin <code>companion object</code>: The 1st parameter would be
 *         the companion object type
 *     </li>
 * </ol>
 */
public final class DefaultFunctionFinder {

    private DefaultFunctionFinder() {
    }

    public static @NotNull DefaultFunction findDefaultFunction(
            @Nullable Object instance,
            @NotNull Method method
    ) {
        if (method.getParameterCount() == 0)
            throw new IllegalArgumentException("Method has no parameters!");
        List<Class<?>> syntheticParams = getSyntheticParameters(method);
        String name = getDefaultMethodName(method);
        MethodWrapper mainWrapper = MethodWrapper.of(
                method,
                getCallerForNonDefault(method, instance)
        );

        Method defaultMethod;

        // 1. look into the declaring class
        defaultMethod = getDeclaredMethodOrNull(
                name,
                method.getDeclaringClass(),
                syntheticParams
        );
        if (defaultMethod != null) {
            BoundMethodCaller callerForDefault = MethodCaller.wrap(defaultMethod).bindTo(
                    Modifier.isStatic(defaultMethod.getModifiers()) ? null : instance
            );
            return new DefaultFunction(
                    mainWrapper,
                    MethodWrapper.of(defaultMethod, callerForDefault)
            );
        }

        // 2. try the same as above, but with our type as the first parameter.
        syntheticParams.add(0, method.getDeclaringClass());
        defaultMethod = getDeclaredMethodOrNull(
                name,
                method.getDeclaringClass(),
                syntheticParams
        );
        if (defaultMethod != null) {
            Object singleton = findSingleton(method.getDeclaringClass());
            BoundMethodCaller callerForDefault = bindTwice(defaultMethod, singleton);
            return new DefaultFunction(
                    mainWrapper,
                    MethodWrapper.of(defaultMethod, callerForDefault)
            );
        }

        // 2. look into companions
        Object companion = KotlinSingletons.findCompanion(method.getDeclaringClass());
        syntheticParams.set(0, companion.getClass());
        defaultMethod = getDeclaredMethodOrNull(
                name,
                companion.getClass(),
                syntheticParams
        );

        if (defaultMethod == null)
            throw new IllegalArgumentException("Failed to find the default synthetic method!");
        BoundMethodCaller callerForDefault = bindTwice(defaultMethod, companion);
        return new DefaultFunction(
                mainWrapper,
                MethodWrapper.of(defaultMethod, callerForDefault)
        );
    }

    private static @NotNull BoundMethodCaller bindTwice(Method method, Object singleton) {
        MethodCaller caller = MethodCaller.wrap(method);
        return arguments -> {
            Object[] boundArgs = ArrayUtils.addFirst(arguments, singleton);
            return caller.call(singleton, boundArgs);
        };
    }

    private static @Nullable Method getDeclaredMethodOrNull(
            @NotNull String name,
            @NotNull Class<?> type,
            @NotNull List<Class<?>> parameterTypes
    ) {
        try {
            return type.getDeclaredMethod(
                    name,
                    parameterTypes.toArray(new Class[0])
            );
        } catch (NoSuchMethodException e) {
            return null;
        }
    }

    private static @NotNull String getDefaultMethodName(@NotNull Method method) {
        return method.getName() + "$default";
    }

    private static @NotNull List<Class<?>> getSyntheticParameters(Method method) {
        List<Class<?>> parameters = new ArrayList<>(method.getParameterCount() + 3);
        Collections.addAll(parameters, method.getParameterTypes());
        parameters.add(int.class);
        parameters.add(Object.class);
        return parameters;
    }

}
